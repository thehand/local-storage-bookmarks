{"version":3,"sources":["local-storage-bookmarks.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;IAOM,qB;;AAEJ;;;;;AAKA,iCAAY,KAAZ,EAAmB;AAAA;;AACjB,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,cAAL,GAAsB,YAAtB;AACA,SAAK,gBAAL,GAAwB,KAAK,OAAL,EAAxB;;AAEA,QAAI,KAAK,gBAAL,KAA0B,IAA9B,EAAoC;AAClC,WAAK,GAAL,CAAS,8BAAT;AACA,WAAK,gBAAL,GAAwB,EAAxB;AACA,WAAK,aAAL;AACA,WAAK,GAAL,CAAS,0DAAT;AACD,KALD,MAKO;AACL,WAAK,GAAL,CAAS,2BAAT;AACA,WAAK,GAAL,CAAS,KAAK,gBAAd;AACD;AACF;;AAED;;;;;;;;wBAII,Q,EAAU;AACZ,UAAI,mBAAmB,KAAK,OAAL,EAAvB;AACA,UAAI,cAAc,iBAAiB,OAAjB,CAAyB,SAAS,QAAT,EAAzB,CAAlB;AACA,UAAI,eAAe,CAAC,CAApB,EAAuB;AACrB,aAAK,gBAAL,CAAsB,IAAtB,CAA2B,QAA3B;AACA,aAAK,aAAL;AACA,aAAK,GAAL,CAAS,kCAAkC,QAA3C;AACD,OAJD,MAIO;AACL,aAAK,GAAL,CAAS,yBAAT;AACD;AACF;;AAED;;;;;;;2BAIO,Q,EAAU;AACf,UAAI,mBAAmB,KAAK,OAAL,EAAvB;AACA,UAAI,cAAc,iBAAiB,OAAjB,CAAyB,SAAS,QAAT,EAAzB,CAAlB;AACA,UAAI,eAAe,CAAC,CAApB,EAAuB;AACrB,aAAK,gBAAL,CAAsB,MAAtB,CAA6B,WAA7B,EAA0C,CAA1C;AACA,aAAK,aAAL;AACA,aAAK,GAAL,CAAS,oCAAoC,QAA7C;AACD,OAJD,MAIO;AACL,aAAK,GAAL,CAAS,qBAAT;AACD;AACF;;AAED;;;;;;;8BAIU;AACR,UAAI,mBAAmB,KAAK,cAAL,CAAoB,OAApB,CAA4B,yBAA5B,CAAvB;AACA,aAAO,iBAAiB,KAAjB,CAAuB,GAAvB,CAAP;AACD;;AAED;;;;;;;;iCAKa,Q,EAAU;AACrB,UAAI,mBAAmB,KAAK,OAAL,EAAvB;AACA,aAAQ,iBAAiB,OAAjB,CAAyB,SAAS,QAAT,EAAzB,KAAiD,CAAC,CAA1D;AACD;;AAED;;;;;;4BAGQ;AACN,WAAK,GAAL,CAAS,wBAAT;AACA,WAAK,gBAAL,GAAwB,EAAxB;AACA,WAAK,aAAL;AACD;;AAED;;;;;;oCAGgB;AACd,WAAK,cAAL,CAAoB,OAApB,CAA4B,yBAA5B,EAAuD,KAAK,gBAA5D;AACD;;AAED;;;;;;;wBAII,M,EAAQ;AACV,UAAI,KAAK,KAAT,EAAgB;AACd,gBAAQ,GAAR,CAAY,MAAZ;AACD;AACF","file":"local-storage-bookmarks-compiled.js","sourcesContent":["/**\n * Local Storage Bookmarks\n *\n * @brief Implements an interface object to the local storage, easy to use to save bookmarks/strings/values\n * @author Francesco Salamone <francesco.salamone@ssd.it>\n *\n */\nclass LocalStorageBookmarks {\n\n  /**\n   * Initialize the class, set the debug mode to false if not passed\n   * create an empty bookmarks container if it not exists into the local storage\n   * @param debug {boolean}\n   */\n  constructor(debug) {\n    this.debug = debug;\n    this.currentStorage = localStorage;\n    this.currentBookmarks = this.getList();\n\n    if (this.currentBookmarks === null) {\n      this.log(\"No bookmarks container found\");\n      this.currentBookmarks = [];\n      this.saveBookmarks();\n      this.log(\"Empty bookmarks container created into the local storage\");\n    } else {\n      this.log(\"Found bookmarks container\");\n      this.log(this.currentBookmarks);\n    }\n  }\n\n  /**\n   * Add a bookmark into the list if it's new\n   * @param bookmark Is the bookmark's content, generally a string\n   */\n  add(bookmark) {\n    let currentBookmarks = this.getList();\n    let bookmarkPos = currentBookmarks.indexOf(bookmark.toString());\n    if (bookmarkPos == -1) {\n      this.currentBookmarks.push(bookmark);\n      this.saveBookmarks();\n      this.log(\"Bookmark successfully saved: \" + bookmark);\n    } else {\n      this.log(\"Bookmark already exists\");\n    }\n  }\n\n  /**\n   * Removes a bookmark if it is already into the list\n   * @param bookmark {string} Is the bookmark's content\n   */\n  remove(bookmark) {\n    let currentBookmarks = this.getList();\n    let bookmarkPos = currentBookmarks.indexOf(bookmark.toString());\n    if (bookmarkPos != -1) {\n      this.currentBookmarks.splice(bookmarkPos, 1);\n      this.saveBookmarks();\n      this.log(\"Bookmark successfully removed: \" + bookmark);\n    } else {\n      this.log(\"Bookmark not exists\");\n    }\n  }\n\n  /**\n   * Returns an array with all current saved bookmarks\n   * @returns {Array|*}\n   */\n  getList() {\n    let currentBookmarks = this.currentStorage.getItem('local-storage-bookmarks');\n    return currentBookmarks.split(\",\");\n  }\n\n  /**\n   * Check if a bookmark is already into the list\n   * @param bookmark {string} Is the bookmark's content\n   * @returns {boolean}\n   */\n  isBookmarked(bookmark) {\n    let currentBookmarks = this.getList();\n    return (currentBookmarks.indexOf(bookmark.toString()) != -1);\n  }\n\n  /**\n   * Clear all bookmarks\n   */\n  reset() {\n    this.log(\"Clearing all bookmarks\");\n    this.currentBookmarks = [];\n    this.saveBookmarks();\n  }\n\n  /**\n   * Save current bookmarks into local storage\n   */\n  saveBookmarks() {\n    this.currentStorage.setItem('local-storage-bookmarks', this.currentBookmarks);\n  }\n\n  /**\n   * Executes a console.log if \"true\" is passed enabling debug mode\n   * @param string {string}\n   */\n  log(string) {\n    if (this.debug) {\n      console.log(string);\n    }\n  }\n}"]}